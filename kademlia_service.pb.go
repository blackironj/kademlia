// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kademlia_service.proto

package kademlia

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Target struct {
	TargetId             string    `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Sender               *NodeInfo `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e023dba0ca8fba6, []int{0}
}

func (m *Target) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Target.Unmarshal(m, b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Target.Marshal(b, m, deterministic)
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return xxx_messageInfo_Target.Size(m)
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

func (m *Target) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *Target) GetSender() *NodeInfo {
	if m != nil {
		return m.Sender
	}
	return nil
}

type Nodes struct {
	Nodes                []*NodeInfo `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Nodes) Reset()         { *m = Nodes{} }
func (m *Nodes) String() string { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()    {}
func (*Nodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e023dba0ca8fba6, []int{1}
}

func (m *Nodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nodes.Unmarshal(m, b)
}
func (m *Nodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nodes.Marshal(b, m, deterministic)
}
func (m *Nodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nodes.Merge(m, src)
}
func (m *Nodes) XXX_Size() int {
	return xxx_messageInfo_Nodes.Size(m)
}
func (m *Nodes) XXX_DiscardUnknown() {
	xxx_messageInfo_Nodes.DiscardUnknown(m)
}

var xxx_messageInfo_Nodes proto.InternalMessageInfo

func (m *Nodes) GetNodes() []*NodeInfo {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NodeInfo struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e023dba0ca8fba6, []int{2}
}

func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfo.Unmarshal(m, b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *NodeInfo) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func init() {
	proto.RegisterType((*Target)(nil), "kademlia.Target")
	proto.RegisterType((*Nodes)(nil), "kademlia.Nodes")
	proto.RegisterType((*NodeInfo)(nil), "kademlia.NodeInfo")
}

func init() { proto.RegisterFile("kademlia_service.proto", fileDescriptor_9e023dba0ca8fba6) }

var fileDescriptor_9e023dba0ca8fba6 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcb, 0x4e, 0x4c, 0x49,
	0xcd, 0xcd, 0xc9, 0x4c, 0x8c, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0xe2, 0x80, 0x89, 0x2b, 0x05, 0x72, 0xb1, 0x85, 0x24, 0x16, 0xa5, 0xa7, 0x96,
	0x08, 0x49, 0x73, 0x71, 0x96, 0x80, 0x59, 0xf1, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c,
	0x41, 0x1c, 0x10, 0x01, 0xcf, 0x14, 0x21, 0x2d, 0x2e, 0xb6, 0xe2, 0xd4, 0xbc, 0x94, 0xd4, 0x22,
	0x09, 0x26, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x21, 0x3d, 0x98, 0x09, 0x7a, 0x7e, 0xf9, 0x29, 0xa9,
	0x9e, 0x79, 0x69, 0xf9, 0x41, 0x50, 0x15, 0x4a, 0x86, 0x5c, 0xac, 0x20, 0xb1, 0x62, 0x21, 0x0d,
	0x2e, 0xd6, 0x3c, 0x10, 0x43, 0x82, 0x51, 0x81, 0x19, 0x87, 0x1e, 0x88, 0x02, 0x25, 0x3b, 0x2e,
	0x0e, 0x98, 0x90, 0x10, 0x1f, 0x17, 0x13, 0xdc, 0x01, 0x4c, 0x99, 0x29, 0x60, 0x7e, 0x01, 0xd8,
	0x5a, 0x10, 0xbf, 0x40, 0x48, 0x88, 0x8b, 0xa5, 0x20, 0xbf, 0xa8, 0x44, 0x82, 0x19, 0x2c, 0x02,
	0x66, 0x1b, 0x39, 0x71, 0xf1, 0x7b, 0x43, 0xcd, 0x0e, 0x86, 0x78, 0x54, 0x48, 0x9f, 0x8b, 0xc3,
	0x2d, 0x33, 0x2f, 0x05, 0x64, 0xac, 0x90, 0x00, 0xc2, 0x66, 0x88, 0x67, 0xa5, 0xf8, 0x51, 0xdd,
	0x52, 0xac, 0xc4, 0x90, 0xc4, 0x06, 0x0e, 0x1a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4,
	0x8b, 0x5d, 0xdb, 0x34, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KademliaServiceClient is the client API for KademliaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KademliaServiceClient interface {
	FindNode(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Nodes, error)
}

type kademliaServiceClient struct {
	cc *grpc.ClientConn
}

func NewKademliaServiceClient(cc *grpc.ClientConn) KademliaServiceClient {
	return &kademliaServiceClient{cc}
}

func (c *kademliaServiceClient) FindNode(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/kademlia.KademliaService/FindNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KademliaServiceServer is the server API for KademliaService service.
type KademliaServiceServer interface {
	FindNode(context.Context, *Target) (*Nodes, error)
}

// UnimplementedKademliaServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKademliaServiceServer struct {
}

func (*UnimplementedKademliaServiceServer) FindNode(ctx context.Context, req *Target) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNode not implemented")
}

func RegisterKademliaServiceServer(s *grpc.Server, srv KademliaServiceServer) {
	s.RegisterService(&_KademliaService_serviceDesc, srv)
}

func _KademliaService_FindNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KademliaServiceServer).FindNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kademlia.KademliaService/FindNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KademliaServiceServer).FindNode(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

var _KademliaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kademlia.KademliaService",
	HandlerType: (*KademliaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindNode",
			Handler:    _KademliaService_FindNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kademlia_service.proto",
}
